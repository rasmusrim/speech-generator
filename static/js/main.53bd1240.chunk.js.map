{"version":3,"sources":["services/EmployeeService.js","components/employee/Employee.js","components/logo/Logo.js","components/word/Word.js","components/canvas/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeService","employees","Employees","map","employee","image","Employee","props","state","width","height","resetPosition","bind","makeLarger","setTimeout","setState","window","innerWidth","innerHeight","yPos","Math","random","speed","setInterval","move","prevProps","closest","this","xPos","pickEmployee","employeeStoppedTrigger","id","y","className","src","alt","style","left","top","transform","transition","zIndex","React","Component","Logo","positionSelectedTrigger","opacity","Word","word","Canvas","showLogo","words","employeePositions","numberOfEmployeesStopped","employeeStopped","logoPositionSelected","pickWords","getAllEmployees","addEventListener","x","length","calculateDistance","forEach","employeePosition","key","pow","logoPosition","distance","sqrt","sort","employee1","employee2","fetch","json","wordsHtml","employeeHtml","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53bd1240.chunk.js","sourcesContent":["import Employees from '../assets/employees.json'\n\nclass EmployeeService {\n\n    static getAllEmployees() {\n\n        let employees = Employees[1]\n\n        employees = employees.map((employee) => {\n            return { image: employee}\n        })\n\n        return employees\n    }\n\n}\n\nexport default EmployeeService;","import React from \"react\"\nimport './employee.css'\n\nclass Employee extends React.Component {\n    constructor(props) {\n        super()\n        this.state = {\n            width: 0,\n            height: 0\n        }\n\n\n        this.resetPosition = this.resetPosition.bind(this)\n        this.makeLarger = this.makeLarger.bind(this)\n    }\n\n    componentDidMount() {\n        \n\n        setTimeout(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n\n            const yPos = (Math.random() * this.state.height);\n            this.setState({ yPos: yPos, speed: (Math.random() * 30) + 50 });\n\n\n            this.resetPosition();\n            setInterval(() => this.move(), 200)\n        }, 1000);\n\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.closest !== this.props.closest) {\n            this.makeLarger();\n        }\n    }\n\n    makeLarger() {\n        this.setState({})\n    }\n\n    resetPosition() {\n        this.setState({ xPos: (Math.random() * this.state.width - 200) })\n    }\n\n    move() {\n\n        if (this.props.pickEmployee && this.state.speed > 10) {\n            let speed = this.state.speed;\n            speed *= 0.9\n            this.setState({ speed: speed })\n        } else if (this.state.speed !== 0 && this.state.speed <= 10) {\n            let speed = 0\n            this.setState({ speed: speed })\n            this.props.employeeStoppedTrigger(this.props.id,this.state.xPos,this.state.yPos)\n        }\n\n        let y = this.state.yPos;\n        y += this.state.speed\n\n        if (y > this.state.height) {\n            y = 0;\n            this.resetPosition();\n        }\n\n        this.setState({ yPos: y })\n\n    }\n\n    render() {\n        return (\n            <div className={\"employee-image\"}>\n                <img src={this.props.image} alt=\"\" style={{ \n                    left: this.props.closest ? '50%' : this.state.xPos, \n                    top: this.props.closest ? 0 : this.state.yPos, \n                    transform: this.props.closest ? 'translateX(-50%)' : 'initial',\n                    transition: this.state.yPos === 0 ? '' : 'top .2s linear',\n                    zIndex: this.props.closest ? 1000 : 0,\n                    width: this.props.closest ? 'auto' : '140px',\n                    height: this.props.closest ? '100%' : 'auto',\n\n                     }} />\n\n            </div>\n\n        )\n    }\n\n}\n\nexport default Employee","import React from \"react\"\nimport './logo.css'\n\nclass Logo extends React.Component {\n    constructor(props) {\n        super()\n        this.state = { xPos: 0, yPos: 0 }\n    }\n\n    componentDidMount() {\n\n        \n        setTimeout(() => {\n        const yPos = Math.random() * (window.innerHeight - 400 );\n        const xPos = Math.random() * (window.innerWidth - 400 );\n\n        this.setState({ xPos: xPos, yPos: yPos })\n\n        this.props.positionSelectedTrigger(xPos, yPos)\n\n        }, 500)\n        \n\n    }\n\n    render() {\n\n        return (\n            <div className={\"logo\"} style={{ left: this.state.xPos, top: this.state.yPos, opacity: this.state.xPos ? '1' : '0' }}><img src=\"https://www.rsveiendom.no/wp-content/uploads/2019/09/Dekode-660x386.jpg\"></img></div>\n        )\n    }\n\n}\n\nexport default Logo","import React from \"react\"\nimport './word.css'\n\nclass Word extends React.Component {\n\n    render() {\n        return (\n            <div className={\"word\"}>{this.props.word}</div>\n        )\n    }\n\n\n}\n\nexport default Word","import React from \"react\"\nimport EmployeeService from '../../services/EmployeeService'\nimport Employee from '../../components/employee/Employee'\nimport Logo from '../../components/logo/Logo'\nimport Word from '../../components/word/Word'\nimport './canvas.css'\n\nclass Canvas extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            employees: [],\n            pickEmployee: false,\n            showLogo: false,\n            words: []\n        }\n\n        this.employeePositions = []\n        this.numberOfEmployeesStopped = 0;\n\n        this.pickEmployee = this.pickEmployee.bind(this);\n        this.employeeStopped = this.employeeStopped.bind(this);\n        this.logoPositionSelected = this.logoPositionSelected.bind(this);\n        this.pickWords = this.pickWords.bind(this);\n\n    }\n\n    componentDidMount() {\n\n        this.setState({ employees: EmployeeService.getAllEmployees() })\n\n        window.addEventListener('click', () => {\n            this.pickEmployee();\n        })\n    }\n\n    pickEmployee() {\n\n        this.setState({ showLogo: true })\n\n        setTimeout(() => this.setState({ pickEmployee: true }), (Math.random() * 5000) + 5000)\n\n    }\n\n    employeeStopped(id, x, y) {\n        this.employeePositions[id] = { x: x, y: y, id: id }\n        this.numberOfEmployeesStopped++;\n\n        if (this.numberOfEmployeesStopped === this.state.employees.length) {\n            this.calculateDistance();\n        }\n    }\n\n    calculateDistance() {\n        this.employeePositions.forEach((employeePosition, key) => {\n            let x = Math.pow(this.logoPosition.x - employeePosition.x, 2)\n            let y = Math.pow(this.logoPosition.y - employeePosition.y, 2)\n\n            let distance = Math.sqrt(x + y);\n            this.employeePositions[key].distance = distance\n\n        })\n\n        this.employeePositions.sort((employee1, employee2) => {\n            return employee1.distance - employee2.distance\n        })\n\n        let employees = this.state.employees\n        employees[this.employeePositions[0].id].closest = true\n\n        this.setState({ employees: employees })\n\n        this.pickWords();\n\n\n    }\n\n    async pickWords() {\n        let words = await fetch('https://random-word-api.herokuapp.com/word?key=TU9U8W5Q&number=3');\n        words = await words.json()\n\n        this.setState({ words: words })\n\n\n    }\n\n    logoPositionSelected(x, y) {\n        this.logoPosition = {\n            x: x,\n            y: y\n        }\n\n    }\n\n    render() {\n        const employeeHtml = this.state.employees.map((employee, key) =>\n            <Employee key={key}\n                image={employee.image}\n                pickEmployee={this.state.pickEmployee}\n                id={key}\n                employeeStoppedTrigger={this.employeeStopped}\n                closest={employee.closest}\n\n            />\n        );\n\n        let wordsHtml;\n\n        if (this.state.words.length) {\n            wordsHtml = this.state.words.map((word, key) =>\n                <Word key={key}\n                    word={word}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {employeeHtml}\n                <div className={\"words\"}>\n                    {wordsHtml}\n                </div>\n                {this.state.showLogo && (<Logo positionSelectedTrigger={this.logoPositionSelected} />)}\n            </div>\n        )\n    }\n}\n\nexport default Canvas","import React from 'react';\nimport './App.css';\nimport Canvas from './components/canvas/Canvas'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}